Vue.component("formFieldDate", {
  template: "#formFieldDate-template",
  props: [
    "tab-parent",
    "field-ref",
    "field-ref-index",
    "serveData",
    "configurable",
    "fieldData",
  ],
  data: function () {
    return {
      fieldPlaceholder: "",
      form_field_id: null,
      fieldID: this.makeid(10),
      fieldName: "Field Date",
      fielApiID: "field_date",
      fielFormat: "yyyy-mm-dd",
      date: null,
      form_custom_data_id: null,
    };
  },
  methods: {
    convertfielApiID() {
      this.fielApiID = this.fieldName
        .toLowerCase()
        .replace(/ /g, "_")
        .replace(/[^\w-]+/g, "");
      this.fieldPlaceholder = this.fieldName.toLowerCase();
    },
    makeid(length) {
      var result = "";
      var characters =
        "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
      var charactersLength = characters.length;
      for (var i = 0; i < length; i++) {
        result += characters.charAt(
          Math.floor(Math.random() * charactersLength)
        );
      }
      return result;
    },
    getData() {
      return {
        fieldPlaceholder: this.fieldPlaceholder,
        fieldID: this.fieldID,
        fieldName: this.fieldName,
        fielApiID: this.fielApiID,
        form_custom_data_id: this.form_custom_data_id,
        fielFormat: this.fielFormat,
      };
    },
    getContentData() {
      return {
        date: this.date,
      };
    },
    init() {
      setTimeout(() => {
        var elems = document.querySelectorAll(".datepicker");
        M.Datepicker.init(elems, {
          format: this.fielFormat,
        });
      }, 2000);
    },
  },
  mounted: function () {
    this.$nextTick(function () {
      for (const key in this.serveData) {
        if (this.serveData.hasOwnProperty(key)) {
          const element = this.serveData[key];
          this[key] = element;
        }
      }
      if (this.fieldData) {
        this.form_field_id = this.fieldData.form_field_id;
        this.form_custom_data_id = this.fieldData.form_custom_data_id;
        this.title = this.fieldData.form_value.title;
        this.fielFormat = this.fieldData.fielFormat;
      }
      this.init();
    });
  },
});

Vue.component("formFieldNumber", {
  template: "#formFieldNumber-template",
  props: [
    "tab-parent",
    "field-ref",
    "field-ref-index",
    "serveData",
    "configurable",
    "fieldData",
  ],
  data: function () {
    return {
      fieldPlaceholder: "",
      form_field_id: null,
      fieldID: this.makeid(10),
      fieldName: "",
      fielApiID: "",
      number: null,
      form_custom_data_id: null,
    };
  },
  methods: {
    convertfielApiID() {
      this.fielApiID = this.fieldName
        .toLowerCase()
        .replace(/ /g, "_")
        .replace(/[^\w-]+/g, "");
      this.fieldPlaceholder = this.fieldName.toLowerCase();
    },
    makeid(length) {
      var result = "";
      var characters =
        "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
      var charactersLength = characters.length;
      for (var i = 0; i < length; i++) {
        result += characters.charAt(
          Math.floor(Math.random() * charactersLength)
        );
      }
      return result;
    },
    getData() {
      return {
        fieldPlaceholder: this.fieldPlaceholder,
        fieldID: this.fieldID,
        fieldName: this.fieldName,
        fielApiID: this.fielApiID,
        form_custom_data_id: this.form_custom_data_id,
      };
    },
    getContentData() {
      return {
        number: this.number,
      };
    },
    init() {
      setTimeout(() => {
        var elems = document.querySelectorAll(".datepicker");
        var instances = M.Datepicker.init(elems, {
          format: "yyyy-mm-dd",
        });
      }, 1000);
    },
  },
  mounted: function () {
    this.$nextTick(function () {
      for (const key in this.serveData) {
        if (this.serveData.hasOwnProperty(key)) {
          const element = this.serveData[key];
          this[key] = element;
        }
      }
      if (this.fieldData) {
        this.form_field_id = this.fieldData.form_field_id;
        this.form_custom_data_id = this.fieldData.form_custom_data_id;
        this.title = this.fieldData.form_value.title;
      }
      this.init();
    });
  },
});

Vue.component("formFieldTextArea", {
  template: "#formFieldTextArea-template",
  props: [
    "tab-parent",
    "field-ref",
    "field-ref-index",
    "serveData",
    "configurable",
    "fieldData",
  ],
  data: function () {
    return {
      form_field_id: null,
      fieldID: this.makeid(10),
      fieldName: "",
      fielApiID: "",
      text: null,
      form_custom_data_id: null,
      fieldPlaceholder: "",
    };
  },
  methods: {
    convertfielApiID() {
      this.fielApiID = this.fieldName
        .toLowerCase()
        .replace(/ /g, "_")
        .replace(/[^\w-]+/g, "");
    },
    makeid(length) {
      var result = "";
      var characters =
        "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
      var charactersLength = characters.length;
      for (var i = 0; i < length; i++) {
        result += characters.charAt(
          Math.floor(Math.random() * charactersLength)
        );
      }
      return result;
    },
    getData() {
      return {
        fieldID: this.fieldID,
        fieldName: this.fieldName,
        fielApiID: this.fielApiID,
        form_custom_data_id: this.form_custom_data_id,
      };
    },
    getContentData() {
      return {
        text: this.text,
      };
    },
  },
  mounted: function () {
    this.$nextTick(function () {
      for (const key in this.serveData) {
        if (this.serveData.hasOwnProperty(key)) {
          const element = this.serveData[key];
          this[key] = element;
        }
      }
      if (this.fieldData) {
        this.form_field_id = this.fieldData.form_field_id;
        this.form_custom_data_id = this.fieldData.form_custom_data_id;
        this.text = this.fieldData.form_value.text;
      }
    });
  },
});

Vue.component("formFieldTime", {
  template: "#formFieldTime-template",
  props: [
    "tab-parent",
    "field-ref",
    "field-ref-index",
    "serveData",
    "configurable",
    "fieldData",
  ],
  data: function () {
    return {
      fieldPlaceholder: "",
      form_field_id: null,
      fieldID: this.makeid(10),
      fieldName: "Field Time",
      fielApiID: "field_time",
      time: null,
      form_custom_data_id: null,
    };
  },
  methods: {
    convertfielApiID() {
      this.fielApiID = this.fieldName
        .toLowerCase()
        .replace(/ /g, "_")
        .replace(/[^\w-]+/g, "");
      this.fieldPlaceholder = this.fieldName.toLowerCase();
    },
    makeid(length) {
      var result = "";
      var characters =
        "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
      var charactersLength = characters.length;
      for (var i = 0; i < length; i++) {
        result += characters.charAt(
          Math.floor(Math.random() * charactersLength)
        );
      }
      return result;
    },
    getData() {
      return {
        fieldPlaceholder: this.fieldPlaceholder,
        fieldID: this.fieldID,
        fieldName: this.fieldName,
        fielApiID: this.fielApiID,
        form_custom_data_id: this.form_custom_data_id,
      };
    },
    getContentData() {
      return {
        time: this.time,
      };
    },
    init() {
      setTimeout(() => {
        var elems = document.querySelectorAll(".timepicker");
        M.Timepicker.init(elems, {
          twelveHour: false
        });
      }, 2000);
    },
  },
  mounted: function () {
    this.$nextTick(function () {
      for (const key in this.serveData) {
        if (this.serveData.hasOwnProperty(key)) {
          const element = this.serveData[key];
          this[key] = element;
        }
      }
      if (this.fieldData) {
        this.form_field_id = this.fieldData.form_field_id;
        this.form_custom_data_id = this.fieldData.form_custom_data_id;
        this.title = this.fieldData.form_value.title;
      }
      this.init();
    });
  },
});

Vue.component("formFieldTitle", {
  template: "#formFieldTitle-template",
  props: [
    "tab-parent",
    "field-ref",
    "field-ref-index",
    "serveData",
    "configurable",
    "fieldData",
  ],
  data: function () {
    return {
      fieldPlaceholder: "",
      form_field_id: null,
      fieldID: this.makeid(10),
      fieldName: "",
      fielApiID: "",
      title: null,
      form_custom_data_id: null,
    };
  },
  methods: {
    convertfielApiID() {
      this.fielApiID = this.fieldName
        .toLowerCase()
        .replace(/ /g, "_")
        .replace(/[^\w-]+/g, "");
      this.fieldPlaceholder = this.fieldName.toLowerCase();
    },
    makeid(length) {
      var result = "";
      var characters =
        "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
      var charactersLength = characters.length;
      for (var i = 0; i < length; i++) {
        result += characters.charAt(
          Math.floor(Math.random() * charactersLength)
        );
      }
      return result;
    },
    getData() {
      return {
        fieldPlaceholder: this.fieldPlaceholder,
        fieldID: this.fieldID,
        fieldName: this.fieldName,
        fielApiID: this.fielApiID,
        form_custom_data_id: this.form_custom_data_id,
      };
    },
    getContentData() {
      return {
        title: this.title,
      };
    },
  },
  mounted: function () {
    this.$nextTick(function () {
      for (const key in this.serveData) {
        if (this.serveData.hasOwnProperty(key)) {
          const element = this.serveData[key];
          this[key] = element;
        }
      }
      if (this.fieldData) {
        this.form_field_id = this.fieldData.form_field_id;
        this.form_custom_data_id = this.fieldData.form_custom_data_id;
        this.title = this.fieldData.form_value.title;
      }
    });
  },
});

Vue.component("formImageSelector", {
  template: "#formImageSelector-template",
  props: [
    "tab-parent",
    "field-ref",
    "field-ref-index",
    "serveData",
    "configurable",
    "fieldData",
  ],
  data: function () {
    return {
      form_field_id: null,
      fieldID: this.makeid(10),
      fieldName: "Agregar Imagen",
      fielApiID: "file_imagen",
      text: null,
      form_custom_data_id: null,
      fieldPlaceholder: "",
      preselected: [],
      mode: "files",
      filter: "images",
      multiple: false,
    };
  },
  methods: {
    getPageImagePath(file) {
      if (file.get_full_file_path()) {
        return file.get_full_file_path();
      }
      return BASEURL + "public/img/default.jpg";
    },
    removeItemImage(index) {
      this.preselected.splice(index, 1);
    },
    convertfielApiID() {
      this.fielApiID = this.fieldName
        .toLowerCase()
        .replace(/ /g, "_")
        .replace(/[^\w-]+/g, "");
    },
    copyCallcack(selectedFiles) {
      selectedFiles = selectedFiles.map((file) => new ExplorerFile(file));
      this.preselected = selectedFiles;
      let instance = M.Modal.getInstance($(".modal"));
      instance.close();
      setTimeout(() => {
        var elems = document.querySelectorAll(".tooltipped");
        M.Tooltip.init(elems, {});
        var elems = document.querySelectorAll(".dropdown-trigger");
        M.Dropdown.init(elems, {});
        var elems = document.querySelectorAll(".materialboxed");
        M.Materialbox.init(elems, {});
      }, 3000);
    },
    makeid(length) {
      var result = "";
      var characters =
        "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
      var charactersLength = characters.length;
      for (var i = 0; i < length; i++) {
        result += characters.charAt(
          Math.floor(Math.random() * charactersLength)
        );
      }
      return result;
    },
    getData() {
      return {
        fieldID: this.fieldID,
        fieldName: this.fieldName,
        fielApiID: this.fielApiID,
        form_custom_data_id: this.form_custom_data_id,
        mode: this.mode,
        filter: this.filter,
        multiple: this.multiple,
      };
    },
    getContentData() {
      return {
        image: this.preselected,
      };
    },
  },
  mounted: function () {
    this.$nextTick(function () {
      for (const key in this.serveData) {
        if (this.serveData.hasOwnProperty(key)) {
          const element = this.serveData[key];
          this[key] = element;
        }
      }
      if (this.fieldData) {
        this.form_field_id = this.fieldData.form_field_id;
        this.form_custom_data_id = this.fieldData.form_custom_data_id;
        this.preselected = this.fieldData.form_value.image.map(
          (file) => new ExplorerFile(file)
        );
      }

      if (this.multiple == "1") {
        this.multiple = true;
      } else {
        this.multiple = false;
      }
    });
  },
});

Vue.component("formTextFormat", {
  template: "#formTextFormat-template",
  props: [
    "tab-parent",
    "field-ref",
    "field-ref-index",
    "serveData",
    "configurable",
    "fieldData",
  ],
  data: function () {
    return {
      form_field_id: null,
      fieldID: "text_format_" + this.makeid(10),
      fieldName: "text_format",
      fielApiID: "text_format_" + this.makeid(4),
      text: null,
      form_custom_data_id: null,
      fieldPlaceholder: "",
    };
  },
  methods: {
    makeid(length) {
      var result = "";
      var characters =
        "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
      var charactersLength = characters.length;
      for (var i = 0; i < length; i++) {
        result += characters.charAt(
          Math.floor(Math.random() * charactersLength)
        );
      }
      return result;
    },
    convertfielApiID() {
      this.fielApiID = this.fieldName
        .toLowerCase()
        .replace(/ /g, "_")
        .replace(/[^\w-]+/g, "");
    },
    getData() {
      return {
        fieldID: this.fieldID,
        fieldName: this.fieldName,
        fielApiID: this.fielApiID,
        form_custom_data_id: this.form_custom_data_id,
      };
    },
    getContentData() {
      return {
        formatText: this.text,
      };
    },
    init() {
      setTimeout(() => {        
        tinymce.init({
          selector: "#" + this.fieldID,
          plugins: ["link table code"],
          setup: (editor) => {
            editor.on("Change", (e) => {
              this.text = tinymce.editors[this.fieldID].getContent();
            });
          },
        });
      }, 2000);
    },
  },
  mounted: function () {
    this.$nextTick(function () {
      for (const key in this.serveData) {
        if (this.serveData.hasOwnProperty(key)) {
          const element = this.serveData[key];
          this[key] = element;
        }
      }
      if (this.fieldData) {
        this.form_field_id = this.fieldData.form_field_id;
        this.form_custom_data_id = this.fieldData.form_custom_data_id;
        this.text = this.fieldData.form_value.text;
      }
      this.init();
    });
  },
});

Vue.component("formFieldSelect", {
  template: "#formFieldselect-template",
  props: [
    "tab-parent",
    "field-ref",
    "field-ref-index",
    "serveData",
    "configurable",
    "fieldData",
  ],
  data: function () {
    return {
      fieldPlaceholder: "",
      form_field_id: null,
      fieldID: this.makeid(10),
      fieldName: "Field select",
      fielApiID: "field_select",
      selectValue: null,
      selectOptions: [
        {
          label: "Option 1",
          value: 0,
        },
        {
          label: "Option 2",
          value: 1,
        },
        {
          label: "Option 3",
          value: 2,
        },
      ],
      form_custom_data_id: null,
    };
  },
  watch: {
    selectOptions: function (value) {
      this.updateSelect();
    },
  },
  methods: {
    convertfielApiID() {
      this.fielApiID = this.fieldName
        .toLowerCase()
        .replace(/ /g, "_")
        .replace(/[^\w-]+/g, "");
      this.fieldPlaceholder = this.fieldName.toLowerCase();
    },
    updateSelect() {
      var elems = document.getElementById(this.fieldID);
      if (elems) {
        if (elems.M_FormSelect) {
          elems.M_FormSelect.destroy();
        }
        setTimeout(() => {
          var instances = M.FormSelect.init(elems, {});
          console.log("select updated");
        }, 1000);
      }
    },
    makeid(length) {
      var result = "";
      var characters =
        "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
      var charactersLength = characters.length;
      for (var i = 0; i < length; i++) {
        result += characters.charAt(
          Math.floor(Math.random() * charactersLength)
        );
      }
      return result;
    },
    getData() {
      return {
        fieldID: this.fieldID,
        fieldName: this.fieldName,
        fielApiID: this.fielApiID,
        form_custom_data_id: this.form_custom_data_id,
        selectOptions: JSON.stringify(this.selectOptions),
      };
    },
    addOption() {
      this.selectOptions.push({
        label: "New Option",
        value: "0",
      });
    },
    setOption(option) {
      option.value = option.label;
      this.updateSelect();
    },
    removeOption(index) {
      this.selectOptions.splice(index, 1);
      this.updateSelect();
    },
    getContentData() {
      return {
        dropdown_select: this.selectValue,
      };
    },
    init() {
      setTimeout(() => {
        this.updateSelect();
        var elems = document.getElementById("collapsible" + this.fieldID);
        var instances = M.Collapsible.init(elems, {
          accordion: false,
        });
      }, 1000);
    },
  },
  mounted: function () {
    this.$nextTick(function () {
      for (const key in this.serveData) {
        if (this.serveData.hasOwnProperty(key)) {
          const element = this.serveData[key];
          this[key] = element;
        }
      }
      if (this.fieldData) {
        this.form_field_id = this.fieldData.form_field_id;
        this.form_custom_data_id = this.fieldData.form_custom_data_id;
        this.selectValue = this.fieldData.form_value.dropdown_select;
      }
      this.init();
    });
  },
});

Vue.component("formFieldBoolean", {
  template: "#formFieldBoolean-template",
  props: [
    "tab-parent",
    "field-ref",
    "field-ref-index",
    "serveData",
    "configurable",
    "fieldData",
  ],
  data: function () {
    return {
      fieldPlaceholder: "",
      form_field_id: null,
      fieldID: this.makeid(10),
      fieldName: "Field Boolean",
      fielApiID: "field_boolean",
      title: null,
      form_custom_data_id: null,
      checkboxes: [
        {
          label: "Option",
          checked: true,
        },
      ],
    };
  },
  methods: {
    addOption(checkbox) {
      this.checkboxes.push({
        label: "Option",
        checked: true,
      });
    },
    setOption(checkbox) {},
    removeOption(index) {
      this.checkboxes.splice(index, 1);
    },
    convertfielApiID() {
      this.fielApiID = this.fieldName
        .toLowerCase()
        .replace(/ /g, "_")
        .replace(/[^\w-]+/g, "");
      this.fieldPlaceholder = this.fieldName.toLowerCase();
    },
    makeid(length) {
      var result = "";
      var characters =
        "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
      var charactersLength = characters.length;
      for (var i = 0; i < length; i++) {
        result += characters.charAt(
          Math.floor(Math.random() * charactersLength)
        );
      }
      return result;
    },
    getData() {
      return {
        fieldPlaceholder: this.fieldPlaceholder,
        fieldID: this.fieldID,
        fieldName: this.fieldName,
        fielApiID: this.fielApiID,
        form_custom_data_id: this.form_custom_data_id,
        checkboxes: JSON.stringify(this.checkboxes),
      };
    },
    getContentData() {
      return {
        bolean: this.checkboxes,
      };
    },
  },
  mounted: function () {
    this.$nextTick(function () {
      for (const key in this.serveData) {
        if (this.serveData.hasOwnProperty(key)) {
          const element = this.serveData[key];
          this[key] = element;
        }
      }
      if (this.fieldData) {
        this.form_field_id = this.fieldData.form_field_id;
        this.form_custom_data_id = this.fieldData.form_custom_data_id;
        this.checkboxes = this.fieldData.form_value.bolean.map((checkbox) => {
          return {
            label: checkbox.label,
            checked: checkbox.checked === "true",
          };
        });
      }
    });
  },
});

var FormNewModule = new Vue({
  el: "#root",
  data: {
    debug: DEBUGMODE,
    editMode: false,
    loader: true,
    form_name: "Nuevo Formulario",
    form_description: "",
    date_create: null,
    date_update: null,
    user: {},
    status: true,
    tabs: [],
    form_custom_id: null,
    formsElements: formsElements,
    configurable: true,
  },
  methods: {
    getInitialTab() {
      return {
        tab_name: "Tab " + (this.tabs.length + 1),
        tabID: this.makeid(10),
        form_tab_id: null,
        form_fields: [],
        edited: true,
        active: true,
        status: true,
      };
    },
    setActive(index) {
      this.tabs.map((el) => {
        el.active = false;
        return el;
      });
      this.tabs[index].active = true;
    },
    addTab() {
      this.debug ? console.log("addTab trigger") : null;
      this.tabs.push(this.getInitialTab());
      this.setActive(this.tabs.length - 1);
    },
    saveTab(tab) {
      this.debug ? console.log("saveTab trigger") : null;
      this.tabs[tab].edited = false;
    },
    makeid(length) {
      var result = "";
      var characters =
        "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
      var charactersLength = characters.length;
      for (var i = 0; i < length; i++) {
        result += characters.charAt(
          Math.floor(Math.random() * charactersLength)
        );
      }
      return result;
    },
    deleteTab(index) {
      this.debug ? console.log("deleteTab trigger") : null;
      if (this.tabs.length == 1) {
        return false;
      }
      this.tabs.splice(index, 1);
    },
    getActiveTab() {
      let activeTab;
      this.tabs.forEach((element, index) => {
        if (element.active) {
          activeTab = index;
        }
      });
      return activeTab;
    },
    addField(formField) {
      this.debug ? console.log("addField trigger") : null;

      this.tabs[this.getActiveTab()].form_fields.push(
        JSON.parse(JSON.stringify(formField))
      );

      setTimeout(() => {
        var elems = document.querySelectorAll(".collapsible");
        M.Collapsible.init(elems, {});
        var elems = document.querySelectorAll(".tooltipped");
        var instances = M.Tooltip.init(elems, {});
        M.AutoInit();
      }, 2000);
    },
    removeField(tabindex, fieldindex) {
      if (
        this.tabs[tabindex].form_fields[fieldindex].component ==
        "formTextFormat"
      ) {
        this.getfieldsData();
        editor = this.tabs[tabindex].form_fields[fieldindex].data;
        tinymce.editors[editor.fieldID].destroy();
        this.tabs[tabindex].form_fields.splice(fieldindex, 1);
      } else {
        this.tabs[tabindex].form_fields.splice(fieldindex, 1);
      }
    },
    getfieldsData() {
      this.debug ? console.log("getfieldsData trigger") : null;
      fieldsComponents = FormNewModule.$refs;
      for (const key in fieldsComponents) {
        if (fieldsComponents.hasOwnProperty(key)) {
          const element = fieldsComponents[key];
          for (let index = 0; index < element.length; index++) {
            const component = element[index];
            FormNewModule.setFieldData(
              component.tabParent.tabID,
              component.fieldRefIndex,
              JSON.parse(JSON.stringify(component.getData()))
            );
          }
        }
      }
    },
    setFieldData(tabID, fieldIndex, data) {
      this.debug ? console.log("setFieldData trigger") : null;
      this.tabs.map((element) => {
        if (element.tabID == tabID) {
          element.form_fields[fieldIndex].data = data;
        }
      });
    },
    getFormData() {
      this.getfieldsData();
      return {
        form_custom_id: this.form_custom_id,
        form_name: this.form_name,
        form_description: this.form_description,
        date_create: this.date_create,
        date_update: this.date_update,
        status: this.status ? 1 : 0,
        user: this.user,
        tabs: this.tabs,
      };
    },
    saveData() {
      $("html, body").animate({ scrollTop: 0 }, 600);
      this.loader = true;
      this.debug ? console.log("saveData trigger") : null;
      var data = this.getFormData();
      var url = BASEURL + "api/v1/forms";
      var self = this;
      $.ajax({
        type: "POST",
        url: url,
        data: {
          data: JSON.stringify(data),
        },
        dataType: "json",
        success: function (response) {
          self.debug ? console.log(url, response) : null;
          if (response.data) {
            self.form_custom_id = response.data.form_custom_id;
            self.editMode = true;
            self.loader = false;
            M.toast({
              html: `<span>Formulario Guardado</span> <a class="btn-flat toast-action" href="${
                BASEURL + "admin/formularios/addData/" + self.form_custom_id
              }"> Agregar Data</a>`,
            });
          }
        },
        error: function (response) {
          self.loader = false;
          M.toast({ html: response.responseJSON.error_message });
        },
      });
    },
    checkEditMode() {
      if (typeof form_custom_id != "undefined") {
        //cargar datos del formulario
        this.editMode = true;
        this.form_custom_id = form_custom_id;
        console.log("editMode", this.editMode);
        var self = this;
        var url = BASEURL + "api/v1/forms/" + form_custom_id;
        $.ajax({
          type: "GET",
          url: url,
          data: {},
          dataType: "json",
          success: function (response) {
            self.debug ? console.log(url, response) : null;
            if (response.code == "200") {
              self.updateFormData(response.data);
            }
          },
          error: function (response) {
            self.loader = false;
            M.toast({ html: "Ocurrió un error" });
          },
        });
      } else {
        this.loader = false;
      }
    },
    updateFormData(data) {
      this.serverdata = data;
      this.form_name = data.form_name;
      this.form_description = data.form_description;
      this.date_create = data.date_create;
      this.date_update = data.date_update;
      this.status = data.status == "1";
      this.user = data.user;
      this.tabs = data.tabs.map((element, index) => {
        return {
          edited: false,
          active: false,
          tab_name: element.tab_name,
          status: element.status == "1",
          form_tab_id: element.form_tab_id,
          form_fields: element.form_fields ? element.form_fields : [],
          tabID: this.makeid(10),
        };
      });

      this.tabs[0].active = true;
      setTimeout(() => {
        var elems = document.querySelectorAll(".collapsible");
        M.Collapsible.init(elems, {});
        this.loader = false;
      }, 2000);
    },
  },
  mounted: function () {
    this.$nextTick(function () {
      this.debug ? console.log("FormNewModule mounted") : null;
      this.tabs.push(this.getInitialTab());
      this.tabs[0].edited = false;
      this.checkEditMode();
    });
  },
});
