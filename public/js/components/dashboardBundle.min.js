Vue.component("albumesWidget", {
  template: "#albumes-widget-template",
  props: ["albumes"],
  data: function () {
    return {
      debug: DEBUGMODE,
    };
  },
  mixins: [mixins],
  methods: {
    getPageImagePath(album, index) {
      let item = album.items[index] ? album.items[index] : { file: {} };
      if (item.file.file_front_path) {
        return BASEURL + item.file.file_front_path;
      }
      return BASEURL + "public/img/default.jpg";
    },
  },
  mounted: function () {
    this.$nextTick(function () {});
  },
});

Vue.component("createContents", {
  template: "#create-contents-template",
  props: ["forms_types", "content"],
  data: function () {
    return {
      debug: DEBUGMODE,
    };
  },
  mixins: [mixins],
  methods: {
    isActive(item) {
      return item.status;
    },
    toggleStatus(item) {
      var self = this;
      $.ajax({
        type: "POST",
        url: BASEURL + "api/v1/forms/data_set_status/" + item.form_content_id,
        data: {
          status: item.status ? "1" : "0"
        },
        dataType: "json",
        success: function (response) {
          console.log(response);
          M.toast({ html: "Actualizado" });
        },
      });
    },
    getFormsTypeUrl(formObject) {
      return BASEURL + "admin/formularios/addData/" + formObject.form_custom_id;
    },
    base_url(path) {
      return BASEURL + path;
    },
  },
  mounted: function () {
    this.$nextTick(function () {
      this.debug ? console.log("mounted: createContents") : null;
    });
  },
});

Vue.component("fileExplorerCollection", {
  template: "#fileExplorerCollection-template",
  props: ["files"],
  data: function () {
    return {
      debug: DEBUGMODE,
    };
  },
  mixins: [mixins],
  computed: {
    shortFiles: function () {
      if (!!this.filter) {
        let filterTerm = this.filter.toLowerCase();
        return this.files.filter((value, index) => {
          return this.searchInObject(value, filterTerm);
        });
      } else {
        return this.files
          .filter((file) => {
            return file.file_type != "folder";
          })
          .slice(0, 25);
      }
    },
  },
  methods: {
    getFiles() {
      var self = this;
      $.ajax({
        type: "GET",
        url: BASEURL + "api/v1/files/",
        data: {},
        dataType: "json",
        success: function (response) {
          if (response.code == 200) {
            let data = response.data;
            data = data.map((file) => {
              return new ExplorerFile(file);
            });
            self.files = data;
            self.init();
          }
        },
      });
    },
    getFilterFiles(filter_name, filter_value) {
      var self = this;
      $.ajax({
        type: "POST",
        url: BASEURL + "api/v1/files/filter_files",
        data: {
          filter_name: filter_name,
          filter_value: filter_value,
        },
        dataType: "json",
        success: function (response) {
          if (response.code == 200) {
            let data = response.data.map((file) => {
              return new ExplorerFile(file);
            });
            self.files = data;
          }
        },
      });
    },
    filterFiles(filter) {
      switch (filter) {
        case "important":
          this.getFilterFiles("featured", ["1"]);
          break;
        case "trash":
          this.getFilterFiles("file_path", ["./trash/"]);
          this.curDir = "./trash/";
          break;
        case "images":
          this.getFilterFiles("file_type", ["jpg", "png", "gif"]);
          break;
        case "doc":
          this.getFilterFiles("file_type", ["pdf", "doc"]);
          break;
        case "docs":
          this.getFilterFiles("file_type", ["pdf", "doc", "xls"]);
          break;
        case "audio":
          this.getFilterFiles("file_type", ["acc, mp3"]);
          break;
        case "video":
          this.getFilterFiles("file_type", ["mp4"]);
          break;
        case "zip":
          this.getFilterFiles("file_type", ["zip", "rar"]);
          break;
        default:
          break;
      }
    },
    featuredFileServe(file) {
      var self = this;
      file.featured = file.featured == "1" ? "0" : "1";
      $.ajax({
        type: "POST",
        url: BASEURL + "api/v1/files/featured_file",
        data: {
          file: file,
        },
        dataType: "json",
        success: function (response) {
          if (response.code == 200) {
            M.toast({ html: "Done!" });
          }
        },
      });
    },
    init() {
      $(".fileExplorerCollection-root .collection").niceScroll();
      setTimeout(() => {
        var elems = document.querySelectorAll(".dropdown-trigger");
        M.Dropdown.init(elems, {});
      }, 2000);
    },
  },
  mounted: function () {
    this.$nextTick(function () {
      this.init();
      this.debug ? console.log("mounted: fileExplorerCollection") : null;
    });
  },
});

Vue.component("pageCard", {
  template: "#page-card-template",
  props: ["pages"],
  data: function () {
    return {
      debug: DEBUGMODE,
    };
  },

  methods: {
    contentText: function (page) {
      var span = document.createElement("span");
      span.innerHTML = page.content;
      let text = span.textContent || span.innerText;
      return text.substring(0, 220) + "...";
    },
    getPageFullPath: function (page) {
      if (page.status == 1) {
        return BASEURL + page.path;
      }
    },
    getPageEditPath: function (page) {
      return BASEURL + "admin/paginas/editar/" + page.page_id;
    },
  },
  mounted: function () {
    this.$nextTick(function () {});
  },
});

Vue.component("usersCollection", {
  template: "#user-collection-template",
  props: ["users"],
  data: function () {
    return {
      debug: DEBUGMODE,
    };
  },
  methods: {},
  mounted: function () {
    this.$nextTick(function () {
      this.debug ? console.log("mounted: usersCollection") : null;
    });
  },
});

var dashboardModule = new Vue({
  el: "#root",
  data: {
    debug: DEBUGMODE,
    loader: true,
    users: [],
    files: [],
    pages: [],
    forms_types: [],
    albumes: [],
    content: [],
    api_data: {
      dashboard: BASEURL + "api/v1/dashboard/",
    },
  },
  mixins: [mixins],
  methods: {
    init() {
      setTimeout(() => {
        var elems = document.querySelectorAll(".dropdown-trigger");
        M.Dropdown.init(elems, {});
        var elems = document.querySelectorAll(".collapsible");
        M.Collapsible.init(elems, {});
      }, 3000);
    },
    getDashboardData() {
      fetch(this.api_data.dashboard)
        .then((response) => response.json())
        .then((response) => {
          let data = response.data;
          this.users = data.users ? data.users.map((user) => new User(user)) : [];
          this.pages = data.pages ? data.pages.map((page) => {
            page.user = new User(page.user);
            return page;
          }) : [];
          this.forms_types = data.forms_types ? data.forms_types : [];
          this.content = data.content ? data.content.map((element) => {
            element.user = new User(element.user);
            element.status = element.status == "1";
            return element;
          }) : [];
          this.files = data.files ? data.files.map((file) => {
            return new ExplorerFile(file);
          }) : [];
          this.albumes = data.albumes ? data.albumes.map((album) => {
            album.user = new User(album.user);
            return album;
          }) : [];
          this.loader = false;
          this.init();
        }).catch(error => {
          console.error(error);
        })
    }
  },
  mounted: function () {
    this.$nextTick(() => {
      this.getDashboardData();
    });
  },
});
