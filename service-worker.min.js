// imports
importScripts("https://cdn.jsdelivr.net/npm/pouchdb@7.0.0/dist/pouchdb.min.js");

const CACHE_VERSION = "v1";

const DYNAMIC_CACHE = "dynamic-" + CACHE_VERSION;
const INMUTABLE_CACHE = "inmutable-" + CACHE_VERSION;

const APP_SHELL = [
  "/admin/login",
  "/admin",
  "/public/css/admin/login.min.css",
  "/public/img/admin/favicon/manifest.json",
  "/public/js/start.min.js",
];

const APP_SHELL_INMUTABLE = [
  "https://cdn.jsdelivr.net/npm/pouchdb@7.0.0/dist/pouchdb.min.js",
  "/public/js/vue/vue.js",
  "/public/js/materialize.min.js",
  "/public/css/materialize.min.css",
  "/public/js/jquery.js",
  "/public/js/jquery.nicescroll.min.js",
];

// Guardar  en el cache dinamico
function actualizaCacheDinamico(dynamicCache, req, res) {
  if (res.ok) {
    return caches.open(dynamicCache).then((cache) => {
      cache.put(req, res.clone());
      return res.clone();
    });
  } else {
    return res;
  }
}

// Cache with network update
function actualizaCacheStatico(staticCache, req, APP_SHELL_INMUTABLE) {
  if (APP_SHELL_INMUTABLE.includes(req.url)) {
    // No hace falta actualizar el inmutable
    // console.log('existe en inmutable', req.url );
  } else {
    // console.log('actualizando', req.url );
    return fetch(req).then((res) => {
      return actualizaCacheDinamico(staticCache, req, res);
    });
  }
}

// Network with cache fallback / update
function manejoApiMensajes(cacheName, req) {
  if (req.clone().method === "POST") {
    // POSTEO de un nuevo mensaje
    if (self.registration.sync && !navigator.onLine) {
      return req
        .clone()
        .text()
        .then((body) => {
          // console.log(body);
          const bodyObj = JSON.parse(body);
          bodyObj.req = {
            headers: bodyObj.headers,
            url: req.url,
          };
          return guardarMensaje(bodyObj);
        });
    } else {
      return fetch(req);
    }
  } else {
    return fetch(req)
      .then((res) => {
        if (res.ok) {
          actualizaCacheDinamico(cacheName, req, res.clone());
          return res.clone();
        } else {
          return caches.match(req);
        }
      })
      .catch((err) => {
        return caches.match(req);
      });
  }
}

// Utilidades para grabar PouchDB
const db = new PouchDB("mensajes");

function guardarMensaje(mensaje) {
  mensaje._id = new Date().toISOString();
  return db.put(mensaje).then(() => {
    self.registration.sync.register("nuevo-post");
    const newResp = { ok: true, offline: true };
    return new Response(JSON.stringify(newResp));
  });
}

const makeid = function (length) {
  var result = "";
  var characters = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz_";
  var charactersLength = characters.length;
  for (var i = 0; i < length; i++) {
    result += characters.charAt(Math.floor(Math.random() * charactersLength));
  }
  return result;
};

// Postear mensajes a la API
function postearMensajes() {
  const posteos = [];
  return db.allDocs({ include_docs: true }).then((docs) => {
    docs.rows.forEach((row) => {
      const doc = row.doc;
      let originalRequets = row.doc.request;
      ImageURL = doc.file;
      var formDataToUpload = new FormData();
      // Split the base64 string in data and contentType
      var block = ImageURL.split(";");
      // Get the content type of the image
      var contentType = block[0].split(":")[1]; // In this case "image/gif"
      // get the real base64 content of the file
      var realData = block[1].split(",")[1]; // In this case "R0lGODlhPQBEAPeoAJosM...."
      // Convert it to a blob to upload
      var blob = b64toBlob(realData, contentType);
      // Create a FormData and append the file with "image" as parameter name
      formDataToUpload.append("file", blob, makeid(10) + ".jpg");
      fetchPom = fetch(originalRequets.url, {
        headers: originalRequets.headers,
        method: "POST",
        body: formDataToUpload,
      }).then((res) => {
        return db.remove(doc);
      });
      posteos.push(fetchPom);
    }); // fin del foreach
    return Promise.all(posteos);
  });
}

self.addEventListener("install", (e) => {
  const cacheStatic = caches
    .open(DYNAMIC_CACHE)
    .then((cache) => cache.addAll(APP_SHELL));
  const cacheInmutable = caches
    .open(INMUTABLE_CACHE)
    .then((cache) => cache.addAll(APP_SHELL_INMUTABLE));
  e.waitUntil(Promise.all([cacheStatic, cacheInmutable]));
});

self.addEventListener("activate", (e) => {
  const respuesta = caches.keys().then((keys) => {
    keys.forEach((key) => {
      if (key !== DYNAMIC_CACHE && key.includes("dynamic")) {
        return caches.delete(key);
      }
    });
  });
  e.waitUntil(respuesta);
});

self.addEventListener("fetch", (e) => {
  let respuesta;
  if (e.request.method == "POST") {
    if (e.request.url.includes("arch/")) {
      respuesta = manejoApiMensajes(DYNAMIC_CACHE, e.request);
    } else {
      respuesta = fetch(e.request);
    }
  } else {
    respuesta = fetch(e.request)
      .then((newRes) => {
        return actualizaCacheDinamico(DYNAMIC_CACHE, e.request, newRes);
      })
      .catch((error) => {
        return caches.match(e.request).then((res) => {
          return res;
        });
      });
  }
  e.respondWith(respuesta);
});

self.addEventListener("sync", (e) => {
  if (e.tag === "nuevo-post") {
    const respuesta = postearMensajes();
    e.waitUntil(respuesta);
  }
});
